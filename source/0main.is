	.align  2
	.code   16
	.thumb_func
	.global	main
	.type   main, %function
main:
	@ setup interrupts

    LDR     reg_intr_handle:r0, =0x03007FFC
    LDR     intr_handle_ptr:r1, =intr_handle
    STR     intr_handle_ptr, [reg_intr_handle]

    LDR     reg_ie:r0, =0x04000200
    MOV     ie:r1, #1		@ vblank
    STRH    ie, [reg_ie]

    MOV     enable:r1, #1
    STRH    enable, [reg_ie, #0x08]         @ reg_ime

	@ setup screen

	LDR     reg_dispcnt:r0, =0x04000000
	LDR     value:r1, =(4 | (1<<10))
	STRH    value, [reg_dispcnt]
    LDR     vblank_irq:r1, =(1<<3)
    STRH    vblank_irq, [reg_dispcnt, #4]   @ reg_dispstat
	
	LDR     mem_palette:r0, =0x05000000
	LDR     color:r1, =0x5200
	STRH	color, [mem_palette, #2]
	LDR     color, =0x6F74
	STRH	color, [mem_palette, #4]
	LDR     color, =0x03E0
	STRH	color, [mem_palette, #6]
	LDR     color, =0x7C10
	STRH	color, [mem_palette, #8]
	LDR     color, =0x7FE0
	STRH	color, [mem_palette, #10]
	LDR     color, =0x7C18
	STRH	color, [mem_palette, #12]
	LDR     color, =0x7C00
	STRH	color, [mem_palette, #14]
	LDR     color, =0x701E
	STRH	color, [mem_palette, #16]

loop:
	LDR		r0, =game_frame
	BL		arm_fn_r0
	B		loop

arm_fn_r0:
	BX		r0

    .section    .iwram, "ax", %progbits
    .align  2
    .code   32
    .arm
intr_handle:
    LDR     reg_if:r0, =0x04000202
    LDRH    irq:r1, [reg_if]
    STRH    irq, [reg_if]       @ acknowledge interrupts
    LDR     reg_ifbios:r0, =0x03007FF8
    STRH    irq, [reg_ifbios]	@ bios
    BX      lr
