	.section	.iwram, "ax", %progbits
	.align	2
	.code	32
	.arm
	.global	draw_triangle_solid
draw_triangle_solid:
	pointa:r0	@ pointer to vec2
	pointb:r1
	pointc:r2
	@ on stack: color, frame buffer pointer

	PUSH	{r4-r11,lr}		@ 36 bytes pushed

	@ rotate points so 1 is on top (1-2 to the left of 1-3)
	@ for ties with 1 prefer 1 to the right (for cross product)
	LDR		ay:r7, [pointa, #4]
	LDR		by:r10, [pointb, #4]
	LDR		cy:r11, [pointc, #4]
	point1:r4
	point2:r5
	point3:r6
	CMP		ay, by
	BGT		a_gt_b
	CMP		ay, cy
	MOVLT	point1, pointa
	MOVLT	point2, pointb
	MOVLT	point3, pointc
	MOVGE	point1, pointc
	MOVGE	point2, pointa
	MOVGE	point3, pointb
	B		end_point_rotate
a_gt_b:
	CMP		by, cy
	MOVLE	point1, pointb
	MOVLE	point2, pointc
	MOVLE	point3, pointa
	MOVGT	point1, pointc
	MOVGT	point2, pointa
	MOVGT	point3, pointb
end_point_rotate:

	@ left/right (min/max)
	LDMIA	point1, {point1, y1_f:r8}
	x1_f:r4		@ was point1

	LDMIA	point2, {x2_f:r7, y2_f:r9}

	LDMIA	point3, {x3_f:r5, point3}
	y3_f:r6		@ was point3

	SUB		num:r0, x3_f, x1_f		@ x3 - x1
	SUB		den:r1, y3_f, y1_f		@ y3 - y1

	@ cross product to determine winding order
	SUB		cross1:r2, x2_f, x1_f
	MUL		cross1, den
	SUB		cross2:r3, y1_f, y2_f	@ reversed (negative)
	MLAS	cross1, cross2, num, cross1		@ only sets Z and N flags
	BPL		end_draw_triangle

	@ calc right slope = (x3 - x1) / (y3 - y1)

	LSL		num, #8					@ 24.8 fixed point
	BL		divide
	MOV		drx_f:r11, num

	@ calc left slope = (x2 - x1) / (y2 - y1)

	SUB		num, x2_f, x1_f			@ x2 - x1
	SUB		den, y2_f, y1_f			@ y2 - y1
	LSL		num, #8					@ 24.8 fixed point
	BL		divide
	MOV		dlx_f:r10, num

	SUB		num, x3_f, x2_f
	SUB		den, y3_f, y2_f
	LSL 	num, #8
	BL		divide

	@ compare y2 and y3 to find mid y and end y
	CMP		y3_f, y2_f
	MOVLE	x2_f, x3_f		@ = x3
	mid_x_f:r7				@ was x2_f
	MOVLE	end_y:r5, y2_f
	MOVGT	end_y, y3_f
	MOVLE	y2_f, y3_f
	mid_y:r9		@ was y2_f

	MOV		bottom_slope_f:r6, num

	LDR		framebuffer:r3, [sp, #40]

	@ convert to vram pointers, also add subpixel offsets to x values

	ASR		end_y, #8
	RSB		end_y, end_y, LSL #4
	LSL		end_y, #4
	ADD		end_y, framebuffer
	PUSH	{end_y}

	AND		mid_y_subpixel:r1, mid_y, #0xFF		@ fraction part of fixed point
	SUB		mid_y_subpixel, #0x100				@ why is this??
	MUL		subpixel_offset:r0, mid_y_subpixel, bottom_slope_f
	SUB		mid_x_f, subpixel_offset, ASR #8

	ASR		mid_y, #8				@ to int
	RSB		mid_y, mid_y, LSL #4	@ row *= 15
	LSL		mid_y, #5				@ multiplied by 480
	ADD		mid_y, framebuffer, LSL #1
	@ also use to store L/R flag
	ADDLE	mid_y, #1		@ from CMP way above

	lx_f:r4		@ was x1_f
	MOV		rx_f:r5, lx_f

	AND		y1_subpixel:r1, y1_f, #0xFF		@ fraction part of fixed point
	MUL		subpixel_offset, y1_subpixel, dlx_f
	SUB		lx_f, subpixel_offset, ASR #8
	MUL		subpixel_offset, y1_subpixel, drx_f
	SUB		rx_f, subpixel_offset, ASR #8

	row:r8		@ was y1_f
	ASR		row, #8					@ to int
	RSB		row, row, LSL #4		@ row *= 15
	LSL		row, #4
	ADD		row, framebuffer

	@ r4: lx_f
	@ r5: rx_f
	@ r6: bottom_slope_f
	@ r7: mid_x_f
	@ r8: row
	@ r9: mid_y * 2 + L/R flag
	@ r10:dlx_f
	@ r11:drx_f

	LDR		color:r3, [sp, #40]		@ end_y was pushed earlier
top_half_loop:
	xstart:r0
	xend:r1
	row_tmp:r2
	.rept	8
		CMP		row, mid_y, LSR #1
		BGT		end_top_half		@ not GE. subpixels idk??
		MOV		xstart, lx_f, ASR #8
		MOV		xend, rx_f, ASR #8
		MOV		row_tmp, row
		BL		draw_span_solid
		ADD		lx_f, dlx_f
		ADD		rx_f, drx_f
		ADD		row, #240
	.endr
	B		top_half_loop
end_top_half:

	TST		mid_y, #1
	MOVNE	drx_f, bottom_slope_f
	MOVEQ	dlx_f, bottom_slope_f
	MOVNE	rx_f, mid_x_f
	MOVEQ	lx_f, mid_x_f

	POP		{end_y:r9}

bottom_half_loop:	@ copy of above
	.rept	8
		CMP		row, end_y
		BGT		end_bottom_half
		MOV		xstart, lx_f, ASR #8
		MOV		xend, rx_f, ASR #8
		MOV		row_tmp:r2, row
		BL		draw_span_solid
		ADD		lx_f, dlx_f
		ADD		rx_f, drx_f
		ADD		row, #240
	.endr
	B		bottom_half_loop
end_bottom_half:
end_draw_triangle:

	POP		{r4-r11,pc}
