	.section	.iwram, "ax", %progbits
	.align	2
	.code	32
	.arm
	.global	transform_points
transform_points:
	theta:r0
	PUSH	{r4-r11, lr}

	LSL		theta, #23	@ AND 0x1FF
	LSR		theta, #22	@ * 2
	LDR		sinlut:r1, =sin_lut
	LDRH	sint:r10, [sinlut, theta]
	@ convert to signed fixed 8
	LSL		sint, #16
	ASR		sint, #20

	ADD		theta, #256		@ 128 * 2
	BIC		theta, #0x400	@ 0x200 * 2
	LDRH	cost:r11, [sinlut, theta]
	LSL		cost, #16
	ASR		cost, #20

	LDR		pt3d:r4, =points_3d
	LDR		pt2d:r5, =transformed_points
	LDR		count:r6, =num_points
	LDR		count, [count]

transform_loop:
	LDMIA	pt3d!, {pointx:r7, pointy:r8, pointz:r9}

	MUL		rotpz:r1, pointz, cost
	MLA		rotpz, pointx, sint, rotpz
	RSB		pointz, #0
	MUL		pointx, pointx, cost
	MLA		pointx, pointz, sint, pointx
	ASR		pointx, #8
	MOV		pointz, rotpz, ASR #8
	ADD		pointz, #(3<<8)

	MOV		num:r0, pointx, LSL #15
	MOV		den:r1, pointz
	BL		divide
	ADD		pointx, num, #(120<<8)	@ center x

	MOV		num, pointy, LSL #15
	MOV		den, pointz
	BL		divide
	ADD		pointy, num, #(80<<8)	@ center y

	STMIA	pt2d!, {pointx, pointy}

	SUBS	count, #1
	BNE		transform_loop

	POP		{r4-r11, lr}
	BX		lr
